package com.pseteamtwo.allways.trip.source.local

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import androidx.room.Transaction
import androidx.room.Update
import androidx.room.Upsert
import kotlinx.coroutines.flow.Flow

/**
 * This data access object provides functionality to access the [TripAndStageDatabase] in terms
 * of the [LocalTrip]s table.
 *
 * According to [androidx.room], room will create an implementation of this interface to provide
 * the functionality of saving to, updating and extracting from the [androidx.room.Database]
 * [TripAndStageDatabase].
 * This functionality is defined for each method in this class by the according
 * [androidx.room] annotations (especially by [androidx.room.Query] commands).
 */
@Dao
interface TripDao {
    /**
     * Observes all trips in the database.
     *
     * @return All trips in the database inside a list in a flow.
     */
    @Query("SELECT * FROM trips")
    fun observeAll(): Flow<List<LocalTrip>>

    /**
     * Observes all composited objects with the room relations defined in [LocalTripWithStages].
     * Room will therefore get all trips inside the database, inserting the according stages of
     * the respective trip into it and so on with the gpsPoints.
     *
     * @return Composited trips with their stages (and the stages with their gpsPoints).
     */
    @Transaction
    @Query("SELECT * FROM trips")
     fun observeAllTripsWithStages(): Flow<List<LocalTripWithStages>>

    /**
     * Observes the trip specified by the given id.
     *
     * @param tripId Identification number of the trip to observe from the database.
     * @return A flow of the requested trip, if present (if not, flow will contain null).
     */
    @Query("SELECT * FROM trips WHERE id = :tripId")
    fun observe(tripId: Long): Flow<LocalTrip>

    /**
     * Observes the trip specified by the given id as a composited object extracted by the room
     * relations defined in [LocalTripWithStages].
     *
     * @param tripId Identification number of the trip to observe from the database.
     * @return A flow of the requested trip, if present (if not, flow will contain null).
     */
    @Transaction
    @Query("SELECT * FROM trips WHERE id = :tripId")
    fun observeTripWithStages(tripId: Long): Flow<LocalTripWithStages>

    /**
     * Get the trip specified by the given id.
     *
     * @param tripId Identification number of the trip to get from the database.
     * @return The requested trip, if present (if not, null).
     */
    @Query("SELECT * FROM trips WHERE id = :tripId")
    suspend fun get(tripId: Long): LocalTrip?

    /**
     * Get the trip specified by the given id as a composited object extracted by the room
     * relations defined in [LocalTripWithStages].
     *
     * @param tripId Identification number of the trip to get from the database.
     * @return The requested trip, if present (if not, null).
     */
    @Transaction
    @Query("SELECT * FROM trips WHERE id = :tripId")
    suspend fun getTripWithStages(tripId: Long): LocalTripWithStages?

    /**
     * Get all trips of the database as composited objects extracted by the room
     * relations defined in [LocalTripWithStages].
     *
     * @return Composited trips with their stages (and the stages with their gpsPoints).
     */
    @Transaction
    @Query("SELECT * FROM trips")
    suspend fun getAllTripsWithStages(): List<LocalTripWithStages>

    /**
     * Inserts a trip into the database.
     * As [LocalTrip.id] is set to be autogenerated, this id will be generated on this insert and
     * is returned by this method.
     *
     * @param trip The trip to be inserted.
     * @return The generated id of the inserted trip.
     */
    @Insert
    suspend fun insert(trip: LocalTrip): Long

    /**
     * Updates a trip in the database with the given trip.
     * This will replace the old trip with the new provided trip while this old trip is
     * specified through the id key of the given trip.
     *
     * @param trip The updated trip to be inserted and to replace the old version of this trip.
     */
    @Update(onConflict = OnConflictStrategy.REPLACE)
    suspend fun update(trip: LocalTrip)

    /**
     * Updates or inserts a trip in the database.
     * This will replace the old trip with the new provided trip while this old trip is
     * specified through the id key of the given trip. If the there is no trip present with the
     * trip id, the trip is simply inserted.
     *
     * @param trip The trip to be inserted or updated.
     */
    @Upsert
    suspend fun upsert(trip: LocalTrip)

    /**
     * Updates [LocalTrip.isConfirmed] for the trip in the database specified by [tripId] to
     * the new value [isConfirmed].
     *
     * @param tripId The identification number of the trip to be updated.
     * @param isConfirmed The new [LocalTrip.isConfirmed] value of the trip.
     */
    @Query("UPDATE trips SET isConfirmed = :isConfirmed WHERE id = :tripId")
    suspend fun updateConfirmed(tripId: Long, isConfirmed: Boolean)

    /**
     * Deletes the specified trip out of the database.
     * As the trips table in the database is connected to the stages table (and that one to the
     * gpsPoints table), on this delete, every stage of this trip (and every gpsPoint of those
     * stages) will also be deleted.
     *
     * @param tripId The identification number of the trip to be deleted.
     * @return How many trips have been deleted.
     */
    @Query("DELETE FROM trips WHERE id = :tripId")
    suspend fun delete(tripId: Long): Int

    @Query("SELECT * FROM trips ORDER BY id DESC LIMIT 1")
    suspend fun getElementWithMaxId(): LocalTrip

}