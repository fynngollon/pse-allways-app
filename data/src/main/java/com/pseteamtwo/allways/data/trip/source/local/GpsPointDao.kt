package com.pseteamtwo.allways.data.trip.source.local

import androidx.room.Dao
import androidx.room.Query
import androidx.room.Update
import androidx.room.Upsert
import kotlinx.coroutines.flow.Flow

/**
 * This data access object provides functionality to access the [TripAndStageDatabase] in terms
 * of the [LocalGpsPoint]s table.
 *
 * According to [androidx.room], room will create an implementation of this interface to provide
 * the functionality of saving to, updating and extracting from the [androidx.room.Database]
 * [TripAndStageDatabase].
 * This functionality is defined for each method in this class by the according
 * [androidx.room] annotations (especially by [androidx.room.Query] commands).
 */
@Dao
interface GpsPointDao {
    /**
     * Observes all gpsPoints in the database.
     *
     * @return All gpsPoints in the database inside a list in a flow.
     */
    @Query("SELECT * FROM gps_points")
    fun observeAll(): Flow<List<LocalGpsPoint>>

    /**
     * Get the gpsPoint specified by the given id.
     *
     * @param gpsPointId Identification number of the gpsPoint to get from the database.
     * @return The requested gpsPoint, if present (if not, null).
     */
    @Query("SELECT * FROM gps_points WHERE id = :gpsPointId")
    suspend fun get(gpsPointId: Long): LocalGpsPoint?

    /**
     * Inserts a gpsPoint into the database.
     * As [LocalGpsPoint.id] is set to be autogenerated, this id will be generated on this insert
     * and is returned by this method.
     *
     * @param gpsPoint The gpsPoint to be inserted.
     * @return The generated id of the inserted gpsPoint.
     */
    @Upsert
    suspend fun insert(gpsPoint: LocalGpsPoint): Long

    /**
     * Updates a gpsPoint in the database with the given gpsPoint.
     * This will replace the old gpsPoint with the new provided gpsPoint while this old gpsPoint
     * is specified through the id key of the given gpsPoint.
     *
     * @param gpsPoint The updated gpsPoint to be inserted and to replace the old version of this
     * gpsPoint.
     */
    @Update
    suspend fun update(gpsPoint: LocalGpsPoint)

    /**
     * Deletes the specified gpsPoint out of the database.
     *
     * @param gpsPointId The identification number of the gpsPoint to be deleted.
     * @return How many gpsPoints have been deleted.
     */
    @Query("DELETE FROM gps_points WHERE id = :gpsPointId")
    suspend fun delete(gpsPointId: Long): Int

    /**
     * Deletes all gpsPoints which are not assigned to a stage (where stageId is null).
     *
     * @return How many gpsPoints have been deleted.
     */
    @Query("DELETE FROM gps_points WHERE stageId IS NULL")
    suspend fun deleteAllNotAssignedToStage(): Int
}